{"ast":null,"code":"var _jsxFileName = \"/Users/sahmed08/Desktop/cs110-react-proj/src/comments/Comments.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = _ref => {\n  _s();\n\n  let {\n    commentsUrl,\n    currentUserId\n  } = _ref;\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(backendComment => backendComment.parentId === null);\n\n  const getReplies = commentId => backendComments.filter(backendComment => backendComment.parentId === commentId).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n\n  const addComment = (username, text, parentId) => {\n    createComment(username, text, parentId).then(comment => {\n      setBackendComments([comment, ...backendComments]);\n      setActiveComment(null);\n    });\n  };\n\n  useEffect(() => {\n    getComments().then(data => {\n      setBackendComments(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-form-title\",\n      children: \"New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      submitLabel: \"Write\",\n      handleSubmit: addComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: rootComments.map(rootComment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: rootComment,\n        replies: getReplies(rootComment.id),\n        activeComment: activeComment,\n        setActiveComment: setActiveComment,\n        addComment: addComment\n      }, rootComment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}; // Helper function\n\n\n_s(Comments, \"Nh9uypyQCza2uraZ+lh8htJiD1M=\");\n\n_c = Comments;\nexport const getComments = async () => {\n  return [{\n    id: \"1\",\n    body: \"First comment\",\n    username: \"Mariam\",\n    userId: \"100\",\n    // not really needed but can be used in a later example\n    parentId: null,\n    createdAt: \"2022-05-02T23:00:33.010+02:00\"\n  }, {\n    id: \"2\",\n    body: \"First nested comment\",\n    username: \"Mariam\",\n    userId: \"100\",\n    // not really needed but can be used in a later example\n    parentId: 1,\n    createdAt: \"2022-05-02T23:00:33.010+02:00\"\n  }, {\n    id: \"3\",\n    body: \"second nested comment comment\",\n    username: \"Mariam\",\n    userId: \"100\",\n    // not really needed but can be used in a later example\n    parentId: 2,\n    createdAt: \"2022-05-02T23:00:33.010+02:00\"\n  }];\n}; // Helper Function\n\nexport const createComment = async function (username, text) {\n  let parentId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let commentId = Math.random().toString(36).substr(2, 9);\n  console.log(\"New comment:\", parentId, text, commentId);\n  return {\n    id: commentId,\n    body: text,\n    parentId,\n    userId: \"100\",\n    username: username,\n    createdAt: new Date().toISOString()\n  };\n};\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","CommentForm","Comment","Comments","commentsUrl","currentUserId","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","getReplies","commentId","sort","a","b","Date","createdAt","getTime","addComment","username","text","createComment","then","comment","getComments","data","map","rootComment","id","body","userId","Math","random","toString","substr","console","log","toISOString"],"sources":["/Users/sahmed08/Desktop/cs110-react-proj/src/comments/Comments.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\n\n\nconst Comments = ({ commentsUrl, currentUserId }) => {\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(\n    (backendComment) => backendComment.parentId === null\n  );\n\n  const getReplies = (commentId) =>\n    backendComments\n      .filter((backendComment) => backendComment.parentId === commentId)\n      .sort(\n        (a, b) =>\n          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n      );\n\n  const addComment = (username, text, parentId) => {\n    createComment(username, text, parentId).then((comment) => {\n      setBackendComments([comment, ...backendComments]);\n      setActiveComment(null);\n    });\n  };\n  \n\n  useEffect(() => {\n    getComments().then((data) => {\n      setBackendComments(data);\n    });\n  }, []);\n\n  return (\n    <div className=\"comments\">\n      <div className=\"comment-form-title\">New Post</div>\n      <CommentForm submitLabel=\"Write\" handleSubmit={addComment} />\n      <div className=\"comments-container\">\n        {rootComments.map((rootComment) => (\n          <Comment\n            key={rootComment.id}\n            comment={rootComment}\n            replies={getReplies(rootComment.id)}\n            activeComment={activeComment}\n            setActiveComment={setActiveComment}\n            addComment={addComment}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Helper function\nexport const getComments = async () => {\n  return [\n    {\n      id: \"1\",\n      body: \"First comment\",\n      username: \"Mariam\",\n      userId: \"100\", // not really needed but can be used in a later example\n      parentId: null,\n      createdAt: \"2022-05-02T23:00:33.010+02:00\",\n    },\n    {\n      id: \"2\",\n      body: \"First nested comment\",\n      username: \"Mariam\",\n      userId: \"100\", // not really needed but can be used in a later example\n      parentId: 1,\n      createdAt: \"2022-05-02T23:00:33.010+02:00\",\n    },\n    {\n      id: \"3\",\n      body: \"second nested comment comment\",\n      username: \"Mariam\",\n      userId: \"100\", // not really needed but can be used in a later example\n      parentId: 2,\n      createdAt: \"2022-05-02T23:00:33.010+02:00\",\n    }\n  ];\n};\n\n// Helper Function\nexport const createComment = async (username,text, parentId = null) => {\n  let commentId = Math.random().toString(36).substr(2, 9);\n  console.log(\"New comment:\", parentId,text, commentId);\n  return {\n    id: commentId,\n    body: text,\n    parentId,\n    userId: \"100\",\n    username: username,\n    createdAt: new Date().toISOString(),\n  };\n};\n\nexport default Comments;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}